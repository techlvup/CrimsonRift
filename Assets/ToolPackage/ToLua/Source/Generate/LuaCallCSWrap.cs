//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class LuaCallCSWrap
{
	public static void Register(LuaState L)
	{
		L.BeginStaticLibs("LuaCallCS");
		L.RegFunction("GetGameObject", GetGameObject);
		L.RegFunction("GetTransform", GetTransform);
		L.RegFunction("OpenUIPrefabPanel", OpenUIPrefabPanel);
		L.RegFunction("CloseUIPrefabPanel", CloseUIPrefabPanel);
		L.RegFunction("CreateUIGameObject", CreateUIGameObject);
		L.RegFunction("GetComponent", GetComponent);
		L.RegFunction("AddComponent", AddComponent);
		L.RegFunction("Clone", Clone);
		L.RegFunction("SetActive", SetActive);
		L.RegFunction("PlayPositionAnimation", PlayPositionAnimation);
		L.RegFunction("PlayRotationAnimation", PlayRotationAnimation);
		L.RegFunction("PlayScaleAnimation", PlayScaleAnimation);
		L.RegFunction("PlayAlphaAnimation", PlayAlphaAnimation);
		L.RegFunction("PlayCurveAnimation", PlayCurveAnimation);
		L.RegFunction("ShowAnimationByTime", ShowAnimationByTime);
		L.RegFunction("PlayAnimation", PlayAnimation);
		L.RegFunction("StopAnimation", StopAnimation);
		L.RegFunction("AddClickListener", AddClickListener);
		L.RegFunction("ReleaseClickListener", ReleaseClickListener);
		L.RegFunction("AddDownListener", AddDownListener);
		L.RegFunction("ReleaseDownListener", ReleaseDownListener);
		L.RegFunction("AddUpListener", AddUpListener);
		L.RegFunction("ReleaseUpListener", ReleaseUpListener);
		L.RegFunction("AddDoubleClickListener", AddDoubleClickListener);
		L.RegFunction("ReleaseDoubleClickListener", ReleaseDoubleClickListener);
		L.RegFunction("AddLongPressListener", AddLongPressListener);
		L.RegFunction("ReleaseLongPressListener", ReleaseLongPressListener);
		L.RegFunction("TextureToCircle", TextureToCircle);
		L.RegFunction("TextureToOriginal", TextureToOriginal);
		L.RegFunction("SetSpriteImage", SetSpriteImage);
		L.RegFunction("SetSpriteImageNativeSize", SetSpriteImageNativeSize);
		L.RegFunction("SetTextureRawImage", SetTextureRawImage);
		L.RegFunction("SetTextureRawImageNativeSize", SetTextureRawImageNativeSize);
		L.RegFunction("SetGray", SetGray);
		L.RegFunction("SetText", SetText);
		L.RegFunction("SetParent", SetParent);
		L.RegFunction("GetSdkMsgManager", GetSdkMsgManager);
		L.RegFunction("GetConfigData", GetConfigData);
		L.RegFunction("ReadFileByteData", ReadFileByteData);
		L.RegFunction("CreateFileByBytes", CreateFileByBytes);
		L.RegFunction("SerializeData", SerializeData);
		L.RegFunction("CompressByteData", CompressByteData);
		L.RegFunction("DecompressByteData", DecompressByteData);
		L.RegFunction("EncryptByteData", EncryptByteData);
		L.RegFunction("DecryptByteData", DecryptByteData);
		L.RegFunction("SaveSafeFile", SaveSafeFile);
		L.RegFunction("FormatFileByteSize", FormatFileByteSize);
		L.RegFunction("GetTextureRectByAtlasName", GetTextureRectByAtlasName);
		L.RegFunction("SendMessage", SendMessage);
		L.RegFunction("BindReceiveMessage", BindReceiveMessage);
		L.RegFunction("UnbindReceiveMessage", UnbindReceiveMessage);
		L.RegVar("MainUICamera", get_MainUICamera, null);
		L.RegVar("MainUIRoot", get_MainUIRoot, null);
		L.EndStaticLibs();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetGameObject(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1 && TypeChecker.CheckTypes<UnityEngine.Object>(L, 1))
			{
				UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
				UnityEngine.GameObject o = LuaCallCS.GetGameObject(arg0);
				ToLua.PushSealed(L, o);
				return 1;
			}
			else if (count == 1 && TypeChecker.CheckTypes<string>(L, 1))
			{
				string arg0 = ToLua.ToString(L, 1);
				UnityEngine.GameObject o = LuaCallCS.GetGameObject(arg0);
				ToLua.PushSealed(L, o);
				return 1;
			}
			else if (count == 2)
			{
				UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				UnityEngine.GameObject o = LuaCallCS.GetGameObject(arg0, arg1);
				ToLua.PushSealed(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: LuaCallCS.GetGameObject");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetTransform(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
				UnityEngine.Transform o = LuaCallCS.GetTransform(arg0);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 2)
			{
				UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				UnityEngine.Transform o = LuaCallCS.GetTransform(arg0, arg1);
				ToLua.Push(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: LuaCallCS.GetTransform");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OpenUIPrefabPanel(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.CheckObject(L, 1, typeof(UnityEngine.GameObject));
				string arg1 = ToLua.CheckString(L, 2);
				LuaInterface.LuaTable o = LuaCallCS.OpenUIPrefabPanel(arg0, arg1);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 3)
			{
				string arg0 = ToLua.CheckString(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				int arg2 = (int)LuaDLL.luaL_checknumber(L, 3);
				LuaInterface.LuaTable o = LuaCallCS.OpenUIPrefabPanel(arg0, arg1, arg2);
				ToLua.Push(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: LuaCallCS.OpenUIPrefabPanel");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CloseUIPrefabPanel(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			LuaCallCS.CloseUIPrefabPanel(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CreateUIGameObject(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				string arg0 = ToLua.CheckString(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				UnityEngine.GameObject o = LuaCallCS.CreateUIGameObject(arg0, arg1);
				ToLua.PushSealed(L, o);
				return 1;
			}
			else if (count == 3)
			{
				string arg0 = ToLua.CheckString(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				int arg2 = (int)LuaDLL.luaL_checknumber(L, 3);
				UnityEngine.GameObject o = LuaCallCS.CreateUIGameObject(arg0, arg1, arg2);
				ToLua.PushSealed(L, o);
				return 1;
			}
			else if (count == 4)
			{
				string arg0 = ToLua.CheckString(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				int arg2 = (int)LuaDLL.luaL_checknumber(L, 3);
				UnityEngine.Object arg3 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 4);
				UnityEngine.GameObject o = LuaCallCS.CreateUIGameObject(arg0, arg1, arg2, arg3);
				ToLua.PushSealed(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: LuaCallCS.CreateUIGameObject");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetComponent(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
			string arg1 = ToLua.CheckString(L, 2);
			string arg2 = ToLua.CheckString(L, 3);
			UnityEngine.Component o = LuaCallCS.GetComponent(arg0, arg1, arg2);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddComponent(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
			string arg1 = ToLua.CheckString(L, 2);
			string arg2 = ToLua.CheckString(L, 3);
			UnityEngine.Component o = LuaCallCS.AddComponent(arg0, arg1, arg2);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Clone(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
				UnityEngine.GameObject o = LuaCallCS.Clone(arg0);
				ToLua.PushSealed(L, o);
				return 1;
			}
			else if (count == 2)
			{
				UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				UnityEngine.GameObject o = LuaCallCS.Clone(arg0, arg1);
				ToLua.PushSealed(L, o);
				return 1;
			}
			else if (count == 3)
			{
				UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				UnityEngine.Object arg2 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 3);
				UnityEngine.GameObject o = LuaCallCS.Clone(arg0, arg1, arg2);
				ToLua.PushSealed(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: LuaCallCS.Clone");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetActive(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
				LuaCallCS.SetActive(arg0);
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes<bool>(L, 2))
			{
				UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
				bool arg1 = LuaDLL.lua_toboolean(L, 2);
				LuaCallCS.SetActive(arg0, arg1);
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes<string>(L, 2))
			{
				UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
				string arg1 = ToLua.ToString(L, 2);
				LuaCallCS.SetActive(arg0, arg1);
				return 0;
			}
			else if (count == 3)
			{
				UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				bool arg2 = LuaDLL.luaL_checkboolean(L, 3);
				LuaCallCS.SetActive(arg0, arg1, arg2);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: LuaCallCS.SetActive");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int PlayPositionAnimation(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
				DG.Tweening.Tweener o = LuaCallCS.PlayPositionAnimation(arg0);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 2)
			{
				UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				DG.Tweening.Tweener o = LuaCallCS.PlayPositionAnimation(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 3)
			{
				UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				UnityEngine.Vector3 arg2 = ToLua.ToVector3(L, 3);
				DG.Tweening.Tweener o = LuaCallCS.PlayPositionAnimation(arg0, arg1, arg2);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 4)
			{
				UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				UnityEngine.Vector3 arg2 = ToLua.ToVector3(L, 3);
				UnityEngine.Vector3 arg3 = ToLua.ToVector3(L, 4);
				DG.Tweening.Tweener o = LuaCallCS.PlayPositionAnimation(arg0, arg1, arg2, arg3);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 5)
			{
				UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				UnityEngine.Vector3 arg2 = ToLua.ToVector3(L, 3);
				UnityEngine.Vector3 arg3 = ToLua.ToVector3(L, 4);
				float arg4 = (float)LuaDLL.luaL_checknumber(L, 5);
				DG.Tweening.Tweener o = LuaCallCS.PlayPositionAnimation(arg0, arg1, arg2, arg3, arg4);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 6)
			{
				UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				UnityEngine.Vector3 arg2 = ToLua.ToVector3(L, 3);
				UnityEngine.Vector3 arg3 = ToLua.ToVector3(L, 4);
				float arg4 = (float)LuaDLL.luaL_checknumber(L, 5);
				LuaFunction arg5 = ToLua.CheckLuaFunction(L, 6);
				DG.Tweening.Tweener o = LuaCallCS.PlayPositionAnimation(arg0, arg1, arg2, arg3, arg4, arg5);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 7)
			{
				UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				UnityEngine.Vector3 arg2 = ToLua.ToVector3(L, 3);
				UnityEngine.Vector3 arg3 = ToLua.ToVector3(L, 4);
				float arg4 = (float)LuaDLL.luaL_checknumber(L, 5);
				LuaFunction arg5 = ToLua.CheckLuaFunction(L, 6);
				float arg6 = (float)LuaDLL.luaL_checknumber(L, 7);
				DG.Tweening.Tweener o = LuaCallCS.PlayPositionAnimation(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 8)
			{
				UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				UnityEngine.Vector3 arg2 = ToLua.ToVector3(L, 3);
				UnityEngine.Vector3 arg3 = ToLua.ToVector3(L, 4);
				float arg4 = (float)LuaDLL.luaL_checknumber(L, 5);
				LuaFunction arg5 = ToLua.CheckLuaFunction(L, 6);
				float arg6 = (float)LuaDLL.luaL_checknumber(L, 7);
				int arg7 = (int)LuaDLL.luaL_checknumber(L, 8);
				DG.Tweening.Tweener o = LuaCallCS.PlayPositionAnimation(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 9)
			{
				UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				UnityEngine.Vector3 arg2 = ToLua.ToVector3(L, 3);
				UnityEngine.Vector3 arg3 = ToLua.ToVector3(L, 4);
				float arg4 = (float)LuaDLL.luaL_checknumber(L, 5);
				LuaFunction arg5 = ToLua.CheckLuaFunction(L, 6);
				float arg6 = (float)LuaDLL.luaL_checknumber(L, 7);
				int arg7 = (int)LuaDLL.luaL_checknumber(L, 8);
				DG.Tweening.LoopType arg8 = (DG.Tweening.LoopType)ToLua.CheckObject(L, 9, typeof(DG.Tweening.LoopType));
				DG.Tweening.Tweener o = LuaCallCS.PlayPositionAnimation(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 10)
			{
				UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				UnityEngine.Vector3 arg2 = ToLua.ToVector3(L, 3);
				UnityEngine.Vector3 arg3 = ToLua.ToVector3(L, 4);
				float arg4 = (float)LuaDLL.luaL_checknumber(L, 5);
				LuaFunction arg5 = ToLua.CheckLuaFunction(L, 6);
				float arg6 = (float)LuaDLL.luaL_checknumber(L, 7);
				int arg7 = (int)LuaDLL.luaL_checknumber(L, 8);
				DG.Tweening.LoopType arg8 = (DG.Tweening.LoopType)ToLua.CheckObject(L, 9, typeof(DG.Tweening.LoopType));
				DG.Tweening.Ease arg9 = (DG.Tweening.Ease)ToLua.CheckObject(L, 10, typeof(DG.Tweening.Ease));
				DG.Tweening.Tweener o = LuaCallCS.PlayPositionAnimation(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: LuaCallCS.PlayPositionAnimation");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int PlayRotationAnimation(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
				DG.Tweening.Tweener o = LuaCallCS.PlayRotationAnimation(arg0);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 2)
			{
				UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				DG.Tweening.Tweener o = LuaCallCS.PlayRotationAnimation(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 3)
			{
				UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				UnityEngine.Vector3 arg2 = ToLua.ToVector3(L, 3);
				DG.Tweening.Tweener o = LuaCallCS.PlayRotationAnimation(arg0, arg1, arg2);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 4)
			{
				UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				UnityEngine.Vector3 arg2 = ToLua.ToVector3(L, 3);
				UnityEngine.Vector3 arg3 = ToLua.ToVector3(L, 4);
				DG.Tweening.Tweener o = LuaCallCS.PlayRotationAnimation(arg0, arg1, arg2, arg3);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 5)
			{
				UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				UnityEngine.Vector3 arg2 = ToLua.ToVector3(L, 3);
				UnityEngine.Vector3 arg3 = ToLua.ToVector3(L, 4);
				float arg4 = (float)LuaDLL.luaL_checknumber(L, 5);
				DG.Tweening.Tweener o = LuaCallCS.PlayRotationAnimation(arg0, arg1, arg2, arg3, arg4);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 6)
			{
				UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				UnityEngine.Vector3 arg2 = ToLua.ToVector3(L, 3);
				UnityEngine.Vector3 arg3 = ToLua.ToVector3(L, 4);
				float arg4 = (float)LuaDLL.luaL_checknumber(L, 5);
				LuaFunction arg5 = ToLua.CheckLuaFunction(L, 6);
				DG.Tweening.Tweener o = LuaCallCS.PlayRotationAnimation(arg0, arg1, arg2, arg3, arg4, arg5);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 7)
			{
				UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				UnityEngine.Vector3 arg2 = ToLua.ToVector3(L, 3);
				UnityEngine.Vector3 arg3 = ToLua.ToVector3(L, 4);
				float arg4 = (float)LuaDLL.luaL_checknumber(L, 5);
				LuaFunction arg5 = ToLua.CheckLuaFunction(L, 6);
				float arg6 = (float)LuaDLL.luaL_checknumber(L, 7);
				DG.Tweening.Tweener o = LuaCallCS.PlayRotationAnimation(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 8)
			{
				UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				UnityEngine.Vector3 arg2 = ToLua.ToVector3(L, 3);
				UnityEngine.Vector3 arg3 = ToLua.ToVector3(L, 4);
				float arg4 = (float)LuaDLL.luaL_checknumber(L, 5);
				LuaFunction arg5 = ToLua.CheckLuaFunction(L, 6);
				float arg6 = (float)LuaDLL.luaL_checknumber(L, 7);
				int arg7 = (int)LuaDLL.luaL_checknumber(L, 8);
				DG.Tweening.Tweener o = LuaCallCS.PlayRotationAnimation(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 9)
			{
				UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				UnityEngine.Vector3 arg2 = ToLua.ToVector3(L, 3);
				UnityEngine.Vector3 arg3 = ToLua.ToVector3(L, 4);
				float arg4 = (float)LuaDLL.luaL_checknumber(L, 5);
				LuaFunction arg5 = ToLua.CheckLuaFunction(L, 6);
				float arg6 = (float)LuaDLL.luaL_checknumber(L, 7);
				int arg7 = (int)LuaDLL.luaL_checknumber(L, 8);
				DG.Tweening.LoopType arg8 = (DG.Tweening.LoopType)ToLua.CheckObject(L, 9, typeof(DG.Tweening.LoopType));
				DG.Tweening.Tweener o = LuaCallCS.PlayRotationAnimation(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 10)
			{
				UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				UnityEngine.Vector3 arg2 = ToLua.ToVector3(L, 3);
				UnityEngine.Vector3 arg3 = ToLua.ToVector3(L, 4);
				float arg4 = (float)LuaDLL.luaL_checknumber(L, 5);
				LuaFunction arg5 = ToLua.CheckLuaFunction(L, 6);
				float arg6 = (float)LuaDLL.luaL_checknumber(L, 7);
				int arg7 = (int)LuaDLL.luaL_checknumber(L, 8);
				DG.Tweening.LoopType arg8 = (DG.Tweening.LoopType)ToLua.CheckObject(L, 9, typeof(DG.Tweening.LoopType));
				DG.Tweening.Ease arg9 = (DG.Tweening.Ease)ToLua.CheckObject(L, 10, typeof(DG.Tweening.Ease));
				DG.Tweening.Tweener o = LuaCallCS.PlayRotationAnimation(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: LuaCallCS.PlayRotationAnimation");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int PlayScaleAnimation(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
				DG.Tweening.Tweener o = LuaCallCS.PlayScaleAnimation(arg0);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 2)
			{
				UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				DG.Tweening.Tweener o = LuaCallCS.PlayScaleAnimation(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 3)
			{
				UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				UnityEngine.Vector3 arg2 = ToLua.ToVector3(L, 3);
				DG.Tweening.Tweener o = LuaCallCS.PlayScaleAnimation(arg0, arg1, arg2);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 4)
			{
				UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				UnityEngine.Vector3 arg2 = ToLua.ToVector3(L, 3);
				UnityEngine.Vector3 arg3 = ToLua.ToVector3(L, 4);
				DG.Tweening.Tweener o = LuaCallCS.PlayScaleAnimation(arg0, arg1, arg2, arg3);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 5)
			{
				UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				UnityEngine.Vector3 arg2 = ToLua.ToVector3(L, 3);
				UnityEngine.Vector3 arg3 = ToLua.ToVector3(L, 4);
				float arg4 = (float)LuaDLL.luaL_checknumber(L, 5);
				DG.Tweening.Tweener o = LuaCallCS.PlayScaleAnimation(arg0, arg1, arg2, arg3, arg4);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 6)
			{
				UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				UnityEngine.Vector3 arg2 = ToLua.ToVector3(L, 3);
				UnityEngine.Vector3 arg3 = ToLua.ToVector3(L, 4);
				float arg4 = (float)LuaDLL.luaL_checknumber(L, 5);
				LuaFunction arg5 = ToLua.CheckLuaFunction(L, 6);
				DG.Tweening.Tweener o = LuaCallCS.PlayScaleAnimation(arg0, arg1, arg2, arg3, arg4, arg5);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 7)
			{
				UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				UnityEngine.Vector3 arg2 = ToLua.ToVector3(L, 3);
				UnityEngine.Vector3 arg3 = ToLua.ToVector3(L, 4);
				float arg4 = (float)LuaDLL.luaL_checknumber(L, 5);
				LuaFunction arg5 = ToLua.CheckLuaFunction(L, 6);
				float arg6 = (float)LuaDLL.luaL_checknumber(L, 7);
				DG.Tweening.Tweener o = LuaCallCS.PlayScaleAnimation(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 8)
			{
				UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				UnityEngine.Vector3 arg2 = ToLua.ToVector3(L, 3);
				UnityEngine.Vector3 arg3 = ToLua.ToVector3(L, 4);
				float arg4 = (float)LuaDLL.luaL_checknumber(L, 5);
				LuaFunction arg5 = ToLua.CheckLuaFunction(L, 6);
				float arg6 = (float)LuaDLL.luaL_checknumber(L, 7);
				int arg7 = (int)LuaDLL.luaL_checknumber(L, 8);
				DG.Tweening.Tweener o = LuaCallCS.PlayScaleAnimation(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 9)
			{
				UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				UnityEngine.Vector3 arg2 = ToLua.ToVector3(L, 3);
				UnityEngine.Vector3 arg3 = ToLua.ToVector3(L, 4);
				float arg4 = (float)LuaDLL.luaL_checknumber(L, 5);
				LuaFunction arg5 = ToLua.CheckLuaFunction(L, 6);
				float arg6 = (float)LuaDLL.luaL_checknumber(L, 7);
				int arg7 = (int)LuaDLL.luaL_checknumber(L, 8);
				DG.Tweening.LoopType arg8 = (DG.Tweening.LoopType)ToLua.CheckObject(L, 9, typeof(DG.Tweening.LoopType));
				DG.Tweening.Tweener o = LuaCallCS.PlayScaleAnimation(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 10)
			{
				UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				UnityEngine.Vector3 arg2 = ToLua.ToVector3(L, 3);
				UnityEngine.Vector3 arg3 = ToLua.ToVector3(L, 4);
				float arg4 = (float)LuaDLL.luaL_checknumber(L, 5);
				LuaFunction arg5 = ToLua.CheckLuaFunction(L, 6);
				float arg6 = (float)LuaDLL.luaL_checknumber(L, 7);
				int arg7 = (int)LuaDLL.luaL_checknumber(L, 8);
				DG.Tweening.LoopType arg8 = (DG.Tweening.LoopType)ToLua.CheckObject(L, 9, typeof(DG.Tweening.LoopType));
				DG.Tweening.Ease arg9 = (DG.Tweening.Ease)ToLua.CheckObject(L, 10, typeof(DG.Tweening.Ease));
				DG.Tweening.Tweener o = LuaCallCS.PlayScaleAnimation(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: LuaCallCS.PlayScaleAnimation");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int PlayAlphaAnimation(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
				DG.Tweening.Tweener o = LuaCallCS.PlayAlphaAnimation(arg0);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 2)
			{
				UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				DG.Tweening.Tweener o = LuaCallCS.PlayAlphaAnimation(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 3)
			{
				UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				float arg2 = (float)LuaDLL.luaL_checknumber(L, 3);
				DG.Tweening.Tweener o = LuaCallCS.PlayAlphaAnimation(arg0, arg1, arg2);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 4)
			{
				UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				float arg2 = (float)LuaDLL.luaL_checknumber(L, 3);
				float arg3 = (float)LuaDLL.luaL_checknumber(L, 4);
				DG.Tweening.Tweener o = LuaCallCS.PlayAlphaAnimation(arg0, arg1, arg2, arg3);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 5)
			{
				UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				float arg2 = (float)LuaDLL.luaL_checknumber(L, 3);
				float arg3 = (float)LuaDLL.luaL_checknumber(L, 4);
				float arg4 = (float)LuaDLL.luaL_checknumber(L, 5);
				DG.Tweening.Tweener o = LuaCallCS.PlayAlphaAnimation(arg0, arg1, arg2, arg3, arg4);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 6)
			{
				UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				float arg2 = (float)LuaDLL.luaL_checknumber(L, 3);
				float arg3 = (float)LuaDLL.luaL_checknumber(L, 4);
				float arg4 = (float)LuaDLL.luaL_checknumber(L, 5);
				LuaFunction arg5 = ToLua.CheckLuaFunction(L, 6);
				DG.Tweening.Tweener o = LuaCallCS.PlayAlphaAnimation(arg0, arg1, arg2, arg3, arg4, arg5);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 7)
			{
				UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				float arg2 = (float)LuaDLL.luaL_checknumber(L, 3);
				float arg3 = (float)LuaDLL.luaL_checknumber(L, 4);
				float arg4 = (float)LuaDLL.luaL_checknumber(L, 5);
				LuaFunction arg5 = ToLua.CheckLuaFunction(L, 6);
				float arg6 = (float)LuaDLL.luaL_checknumber(L, 7);
				DG.Tweening.Tweener o = LuaCallCS.PlayAlphaAnimation(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 8)
			{
				UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				float arg2 = (float)LuaDLL.luaL_checknumber(L, 3);
				float arg3 = (float)LuaDLL.luaL_checknumber(L, 4);
				float arg4 = (float)LuaDLL.luaL_checknumber(L, 5);
				LuaFunction arg5 = ToLua.CheckLuaFunction(L, 6);
				float arg6 = (float)LuaDLL.luaL_checknumber(L, 7);
				int arg7 = (int)LuaDLL.luaL_checknumber(L, 8);
				DG.Tweening.Tweener o = LuaCallCS.PlayAlphaAnimation(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 9)
			{
				UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				float arg2 = (float)LuaDLL.luaL_checknumber(L, 3);
				float arg3 = (float)LuaDLL.luaL_checknumber(L, 4);
				float arg4 = (float)LuaDLL.luaL_checknumber(L, 5);
				LuaFunction arg5 = ToLua.CheckLuaFunction(L, 6);
				float arg6 = (float)LuaDLL.luaL_checknumber(L, 7);
				int arg7 = (int)LuaDLL.luaL_checknumber(L, 8);
				DG.Tweening.LoopType arg8 = (DG.Tweening.LoopType)ToLua.CheckObject(L, 9, typeof(DG.Tweening.LoopType));
				DG.Tweening.Tweener o = LuaCallCS.PlayAlphaAnimation(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 10)
			{
				UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				float arg2 = (float)LuaDLL.luaL_checknumber(L, 3);
				float arg3 = (float)LuaDLL.luaL_checknumber(L, 4);
				float arg4 = (float)LuaDLL.luaL_checknumber(L, 5);
				LuaFunction arg5 = ToLua.CheckLuaFunction(L, 6);
				float arg6 = (float)LuaDLL.luaL_checknumber(L, 7);
				int arg7 = (int)LuaDLL.luaL_checknumber(L, 8);
				DG.Tweening.LoopType arg8 = (DG.Tweening.LoopType)ToLua.CheckObject(L, 9, typeof(DG.Tweening.LoopType));
				DG.Tweening.Ease arg9 = (DG.Tweening.Ease)ToLua.CheckObject(L, 10, typeof(DG.Tweening.Ease));
				DG.Tweening.Tweener o = LuaCallCS.PlayAlphaAnimation(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: LuaCallCS.PlayAlphaAnimation");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int PlayCurveAnimation(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
				DG.Tweening.Tweener o = LuaCallCS.PlayCurveAnimation(arg0);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 2)
			{
				UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				DG.Tweening.Tweener o = LuaCallCS.PlayCurveAnimation(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 3)
			{
				UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				LuaTable arg2 = ToLua.CheckLuaTable(L, 3);
				DG.Tweening.Tweener o = LuaCallCS.PlayCurveAnimation(arg0, arg1, arg2);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 4)
			{
				UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				LuaTable arg2 = ToLua.CheckLuaTable(L, 3);
				float arg3 = (float)LuaDLL.luaL_checknumber(L, 4);
				DG.Tweening.Tweener o = LuaCallCS.PlayCurveAnimation(arg0, arg1, arg2, arg3);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 5)
			{
				UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				LuaTable arg2 = ToLua.CheckLuaTable(L, 3);
				float arg3 = (float)LuaDLL.luaL_checknumber(L, 4);
				LuaFunction arg4 = ToLua.CheckLuaFunction(L, 5);
				DG.Tweening.Tweener o = LuaCallCS.PlayCurveAnimation(arg0, arg1, arg2, arg3, arg4);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 6)
			{
				UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				LuaTable arg2 = ToLua.CheckLuaTable(L, 3);
				float arg3 = (float)LuaDLL.luaL_checknumber(L, 4);
				LuaFunction arg4 = ToLua.CheckLuaFunction(L, 5);
				float arg5 = (float)LuaDLL.luaL_checknumber(L, 6);
				DG.Tweening.Tweener o = LuaCallCS.PlayCurveAnimation(arg0, arg1, arg2, arg3, arg4, arg5);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 7)
			{
				UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				LuaTable arg2 = ToLua.CheckLuaTable(L, 3);
				float arg3 = (float)LuaDLL.luaL_checknumber(L, 4);
				LuaFunction arg4 = ToLua.CheckLuaFunction(L, 5);
				float arg5 = (float)LuaDLL.luaL_checknumber(L, 6);
				DG.Tweening.PathType arg6 = (DG.Tweening.PathType)ToLua.CheckObject(L, 7, typeof(DG.Tweening.PathType));
				DG.Tweening.Tweener o = LuaCallCS.PlayCurveAnimation(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 8)
			{
				UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				LuaTable arg2 = ToLua.CheckLuaTable(L, 3);
				float arg3 = (float)LuaDLL.luaL_checknumber(L, 4);
				LuaFunction arg4 = ToLua.CheckLuaFunction(L, 5);
				float arg5 = (float)LuaDLL.luaL_checknumber(L, 6);
				DG.Tweening.PathType arg6 = (DG.Tweening.PathType)ToLua.CheckObject(L, 7, typeof(DG.Tweening.PathType));
				int arg7 = (int)LuaDLL.luaL_checknumber(L, 8);
				DG.Tweening.Tweener o = LuaCallCS.PlayCurveAnimation(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 9)
			{
				UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				LuaTable arg2 = ToLua.CheckLuaTable(L, 3);
				float arg3 = (float)LuaDLL.luaL_checknumber(L, 4);
				LuaFunction arg4 = ToLua.CheckLuaFunction(L, 5);
				float arg5 = (float)LuaDLL.luaL_checknumber(L, 6);
				DG.Tweening.PathType arg6 = (DG.Tweening.PathType)ToLua.CheckObject(L, 7, typeof(DG.Tweening.PathType));
				int arg7 = (int)LuaDLL.luaL_checknumber(L, 8);
				DG.Tweening.LoopType arg8 = (DG.Tweening.LoopType)ToLua.CheckObject(L, 9, typeof(DG.Tweening.LoopType));
				DG.Tweening.Tweener o = LuaCallCS.PlayCurveAnimation(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 10)
			{
				UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				LuaTable arg2 = ToLua.CheckLuaTable(L, 3);
				float arg3 = (float)LuaDLL.luaL_checknumber(L, 4);
				LuaFunction arg4 = ToLua.CheckLuaFunction(L, 5);
				float arg5 = (float)LuaDLL.luaL_checknumber(L, 6);
				DG.Tweening.PathType arg6 = (DG.Tweening.PathType)ToLua.CheckObject(L, 7, typeof(DG.Tweening.PathType));
				int arg7 = (int)LuaDLL.luaL_checknumber(L, 8);
				DG.Tweening.LoopType arg8 = (DG.Tweening.LoopType)ToLua.CheckObject(L, 9, typeof(DG.Tweening.LoopType));
				DG.Tweening.Ease arg9 = (DG.Tweening.Ease)ToLua.CheckObject(L, 10, typeof(DG.Tweening.Ease));
				DG.Tweening.Tweener o = LuaCallCS.PlayCurveAnimation(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: LuaCallCS.PlayCurveAnimation");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ShowAnimationByTime(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
				LuaCallCS.ShowAnimationByTime(arg0);
				return 0;
			}
			else if (count == 2)
			{
				UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				LuaCallCS.ShowAnimationByTime(arg0, arg1);
				return 0;
			}
			else if (count == 3)
			{
				UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				string arg2 = ToLua.CheckString(L, 3);
				LuaCallCS.ShowAnimationByTime(arg0, arg1, arg2);
				return 0;
			}
			else if (count == 4)
			{
				UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				string arg2 = ToLua.CheckString(L, 3);
				float arg3 = (float)LuaDLL.luaL_checknumber(L, 4);
				LuaCallCS.ShowAnimationByTime(arg0, arg1, arg2, arg3);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: LuaCallCS.ShowAnimationByTime");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int PlayAnimation(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
				LuaCallCS.PlayAnimation(arg0);
				return 0;
			}
			else if (count == 2)
			{
				UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				LuaCallCS.PlayAnimation(arg0, arg1);
				return 0;
			}
			else if (count == 3)
			{
				UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				string arg2 = ToLua.CheckString(L, 3);
				LuaCallCS.PlayAnimation(arg0, arg1, arg2);
				return 0;
			}
			else if (count == 4)
			{
				UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				string arg2 = ToLua.CheckString(L, 3);
				UnityEngine.WrapMode arg3 = (UnityEngine.WrapMode)ToLua.CheckObject(L, 4, typeof(UnityEngine.WrapMode));
				LuaCallCS.PlayAnimation(arg0, arg1, arg2, arg3);
				return 0;
			}
			else if (count == 5)
			{
				UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				string arg2 = ToLua.CheckString(L, 3);
				UnityEngine.WrapMode arg3 = (UnityEngine.WrapMode)ToLua.CheckObject(L, 4, typeof(UnityEngine.WrapMode));
				LuaFunction arg4 = ToLua.CheckLuaFunction(L, 5);
				LuaCallCS.PlayAnimation(arg0, arg1, arg2, arg3, arg4);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: LuaCallCS.PlayAnimation");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int StopAnimation(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
				LuaCallCS.StopAnimation(arg0);
				return 0;
			}
			else if (count == 2)
			{
				UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				LuaCallCS.StopAnimation(arg0, arg1);
				return 0;
			}
			else if (count == 3)
			{
				UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				string arg2 = ToLua.CheckString(L, 3);
				LuaCallCS.StopAnimation(arg0, arg1, arg2);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: LuaCallCS.StopAnimation");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddClickListener(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
			string arg1 = ToLua.CheckString(L, 2);
			LuaFunction arg2 = ToLua.CheckLuaFunction(L, 3);
			LuaCallCS.AddClickListener(arg0, arg1, arg2);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReleaseClickListener(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
			LuaCallCS.ReleaseClickListener(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddDownListener(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
			LuaFunction arg1 = ToLua.CheckLuaFunction(L, 2);
			LuaCallCS.AddDownListener(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReleaseDownListener(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
			LuaCallCS.ReleaseDownListener(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddUpListener(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
			LuaFunction arg1 = ToLua.CheckLuaFunction(L, 2);
			LuaCallCS.AddUpListener(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReleaseUpListener(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
			LuaCallCS.ReleaseUpListener(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddDoubleClickListener(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
			LuaFunction arg1 = ToLua.CheckLuaFunction(L, 2);
			LuaCallCS.AddDoubleClickListener(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReleaseDoubleClickListener(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
			LuaCallCS.ReleaseDoubleClickListener(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddLongPressListener(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
			LuaFunction arg1 = ToLua.CheckLuaFunction(L, 2);
			LuaCallCS.AddLongPressListener(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReleaseLongPressListener(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
			LuaCallCS.ReleaseLongPressListener(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int TextureToCircle(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
				LuaCallCS.TextureToCircle(arg0);
				return 0;
			}
			else if (count == 2)
			{
				UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
				bool arg1 = LuaDLL.luaL_checkboolean(L, 2);
				LuaCallCS.TextureToCircle(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: LuaCallCS.TextureToCircle");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int TextureToOriginal(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
				LuaCallCS.TextureToOriginal(arg0);
				return 0;
			}
			else if (count == 2)
			{
				UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
				bool arg1 = LuaDLL.luaL_checkboolean(L, 2);
				LuaCallCS.TextureToOriginal(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: LuaCallCS.TextureToOriginal");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetSpriteImage(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
				LuaCallCS.SetSpriteImage(arg0);
				return 0;
			}
			else if (count == 2)
			{
				UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				LuaCallCS.SetSpriteImage(arg0, arg1);
				return 0;
			}
			else if (count == 3)
			{
				UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				string arg2 = ToLua.CheckString(L, 3);
				LuaCallCS.SetSpriteImage(arg0, arg1, arg2);
				return 0;
			}
			else if (count == 4)
			{
				UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				string arg2 = ToLua.CheckString(L, 3);
				bool arg3 = LuaDLL.luaL_checkboolean(L, 4);
				LuaCallCS.SetSpriteImage(arg0, arg1, arg2, arg3);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: LuaCallCS.SetSpriteImage");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetSpriteImageNativeSize(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UnityEngine.UI.Image arg0 = (UnityEngine.UI.Image)ToLua.CheckObject<UnityEngine.UI.Image>(L, 1);
			LuaCallCS.SetSpriteImageNativeSize(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetTextureRawImage(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
				LuaCallCS.SetTextureRawImage(arg0);
				return 0;
			}
			else if (count == 2)
			{
				UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				LuaCallCS.SetTextureRawImage(arg0, arg1);
				return 0;
			}
			else if (count == 3)
			{
				UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				string arg2 = ToLua.CheckString(L, 3);
				LuaCallCS.SetTextureRawImage(arg0, arg1, arg2);
				return 0;
			}
			else if (count == 4)
			{
				UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				string arg2 = ToLua.CheckString(L, 3);
				bool arg3 = LuaDLL.luaL_checkboolean(L, 4);
				LuaCallCS.SetTextureRawImage(arg0, arg1, arg2, arg3);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: LuaCallCS.SetTextureRawImage");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetTextureRawImageNativeSize(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UnityEngine.UI.RawImage arg0 = (UnityEngine.UI.RawImage)ToLua.CheckObject<UnityEngine.UI.RawImage>(L, 1);
			LuaCallCS.SetTextureRawImageNativeSize(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetGray(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
				LuaCallCS.SetGray(arg0);
				return 0;
			}
			else if (count == 2)
			{
				UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				LuaCallCS.SetGray(arg0, arg1);
				return 0;
			}
			else if (count == 3)
			{
				UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				bool arg2 = LuaDLL.luaL_checkboolean(L, 3);
				LuaCallCS.SetGray(arg0, arg1, arg2);
				return 0;
			}
			else if (count == 4)
			{
				UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				bool arg2 = LuaDLL.luaL_checkboolean(L, 3);
				bool arg3 = LuaDLL.luaL_checkboolean(L, 4);
				LuaCallCS.SetGray(arg0, arg1, arg2, arg3);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: LuaCallCS.SetGray");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetText(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
				LuaCallCS.SetText(arg0);
				return 0;
			}
			else if (count == 2)
			{
				UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				LuaCallCS.SetText(arg0, arg1);
				return 0;
			}
			else if (count == 3)
			{
				UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				string arg2 = ToLua.CheckString(L, 3);
				LuaCallCS.SetText(arg0, arg1, arg2);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: LuaCallCS.SetText");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetParent(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
			UnityEngine.Transform arg1 = (UnityEngine.Transform)ToLua.CheckObject<UnityEngine.Transform>(L, 2);
			LuaCallCS.SetParent(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetSdkMsgManager(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			SdkMsgManager o = LuaCallCS.GetSdkMsgManager();
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetConfigData(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			string arg0 = ToLua.CheckString(L, 1);
			string arg1 = ToLua.CheckString(L, 2);
			string arg2 = ToLua.CheckString(L, 3);
			string o = LuaCallCS.GetConfigData(arg0, arg1, arg2);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadFileByteData(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			byte[] o = LuaCallCS.ReadFileByteData(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CreateFileByBytes(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			string arg0 = ToLua.CheckString(L, 1);
			byte[] arg1 = ToLua.CheckByteBuffer(L, 2);
			LuaCallCS.CreateFileByBytes(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SerializeData(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			object arg0 = ToLua.ToVarObject(L, 1);
			byte[] o = LuaCallCS.SerializeData(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CompressByteData(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			byte[] arg0 = ToLua.CheckByteBuffer(L, 1);
			byte[] o = LuaCallCS.CompressByteData(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DecompressByteData(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			byte[] arg0 = ToLua.CheckByteBuffer(L, 1);
			byte[] o = LuaCallCS.DecompressByteData(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int EncryptByteData(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			byte[] arg0 = ToLua.CheckByteBuffer(L, 1);
			byte[] arg1 = ToLua.CheckByteBuffer(L, 2);
			byte[] arg2 = ToLua.CheckByteBuffer(L, 3);
			byte[] o = LuaCallCS.EncryptByteData(arg0, arg1, arg2);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DecryptByteData(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			byte[] arg0 = ToLua.CheckByteBuffer(L, 1);
			byte[] arg1 = ToLua.CheckByteBuffer(L, 2);
			byte[] arg2 = ToLua.CheckByteBuffer(L, 3);
			byte[] o = LuaCallCS.DecryptByteData(arg0, arg1, arg2);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SaveSafeFile(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			object arg0 = ToLua.ToVarObject(L, 1);
			string arg1 = ToLua.CheckString(L, 2);
			LuaCallCS.SaveSafeFile(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int FormatFileByteSize(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			long arg0 = LuaDLL.tolua_checkint64(L, 1);
			string o = LuaCallCS.FormatFileByteSize(arg0);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetTextureRectByAtlasName(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			string arg0 = ToLua.CheckString(L, 1);
			string arg1 = ToLua.CheckString(L, 2);
			float[] arg2 = null;
			bool o = LuaCallCS.GetTextureRectByAtlasName(arg0, arg1, out arg2);
			LuaDLL.lua_pushboolean(L, o);
			ToLua.Push(L, arg2);
			return 2;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SendMessage(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			string arg0 = ToLua.CheckString(L, 1);
			LuaTable arg1 = ToLua.CheckLuaTable(L, 2);
			LuaCallCS.SendMessage(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int BindReceiveMessage(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			string arg0 = ToLua.CheckString(L, 1);
			LuaFunction arg1 = ToLua.CheckLuaFunction(L, 2);
			LuaCallCS.BindReceiveMessage(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UnbindReceiveMessage(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			string arg0 = ToLua.CheckString(L, 1);
			LuaFunction arg1 = ToLua.CheckLuaFunction(L, 2);
			LuaCallCS.UnbindReceiveMessage(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_MainUICamera(IntPtr L)
	{
		try
		{
			ToLua.PushSealed(L, LuaCallCS.MainUICamera);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_MainUIRoot(IntPtr L)
	{
		try
		{
			ToLua.PushSealed(L, LuaCallCS.MainUIRoot);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

