//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class DataUtilityManagerWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(DataUtilityManager), typeof(System.Object));
		L.RegFunction("InitDirectory", InitDirectory);
		L.RegFunction("SetWebQuestData", SetWebQuestData);
		L.RegFunction("New", _CreateDataUtilityManager);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("m_platform", get_m_platform, set_m_platform);
		L.RegVar("m_localRootPath", get_m_localRootPath, set_m_localRootPath);
		L.RegVar("m_webRootPath", get_m_webRootPath, set_m_webRootPath);
		L.RegVar("m_binPath", get_m_binPath, set_m_binPath);
		L.RegVar("m_webIpv4Str", get_m_webIpv4Str, set_m_webIpv4Str);
		L.RegVar("m_webPortInt", get_m_webPortInt, set_m_webPortInt);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateDataUtilityManager(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				DataUtilityManager obj = new DataUtilityManager();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: DataUtilityManager.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int InitDirectory(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			DataUtilityManager.InitDirectory(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetWebQuestData(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UnityEngine.Networking.UnityWebRequest arg0 = (UnityEngine.Networking.UnityWebRequest)ToLua.CheckObject<UnityEngine.Networking.UnityWebRequest>(L, 1);
			DataUtilityManager.SetWebQuestData(ref arg0);
			ToLua.PushObject(L, arg0);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_m_platform(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, DataUtilityManager.m_platform);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_m_localRootPath(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, DataUtilityManager.m_localRootPath);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_m_webRootPath(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, DataUtilityManager.m_webRootPath);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_m_binPath(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, DataUtilityManager.m_binPath);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_m_webIpv4Str(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, DataUtilityManager.m_webIpv4Str);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_m_webPortInt(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, DataUtilityManager.m_webPortInt);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_m_platform(IntPtr L)
	{
		try
		{
			string arg0 = ToLua.CheckString(L, 2);
			DataUtilityManager.m_platform = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_m_localRootPath(IntPtr L)
	{
		try
		{
			string arg0 = ToLua.CheckString(L, 2);
			DataUtilityManager.m_localRootPath = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_m_webRootPath(IntPtr L)
	{
		try
		{
			string arg0 = ToLua.CheckString(L, 2);
			DataUtilityManager.m_webRootPath = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_m_binPath(IntPtr L)
	{
		try
		{
			string arg0 = ToLua.CheckString(L, 2);
			DataUtilityManager.m_binPath = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_m_webIpv4Str(IntPtr L)
	{
		try
		{
			string arg0 = ToLua.CheckString(L, 2);
			DataUtilityManager.m_webIpv4Str = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_m_webPortInt(IntPtr L)
	{
		try
		{
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			DataUtilityManager.m_webPortInt = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

